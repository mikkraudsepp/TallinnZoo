// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Animals.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BinomialName")
                        .HasMaxLength(80);

                    b.Property<Guid?>("ConservationStatusId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<Guid?>("FeaturedImgId");

                    b.Property<DateTime>("LastEdited");

                    b.Property<Guid?>("MapSegmentId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<Guid?>("ScientificClassificationId");

                    b.HasKey("Id");

                    b.HasIndex("ConservationStatusId");

                    b.HasIndex("FeaturedImgId");

                    b.HasIndex("ScientificClassificationId");

                    b.ToTable("Animal");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e24360c3-ef70-443d-bb42-dfc3d790e745"),
                            BinomialName = "Halichoerus grypus",
                            ConservationStatusId = new Guid("78202fb8-b51e-4177-9f68-acb9d3cf6c3d"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 766, DateTimeKind.Local).AddTicks(3752),
                            Description = "Hallhüljes (Halichoerus grypus) on loivaliste (Pinnipedia) seltsi hülglaste (Phocidae) sugukonda kuuluv veeimetaja. Hallhüljes on Läänemere imetajatest suurim [1]. Ta on üks kolmest Eestis elavast hülglasest, omanimelise perekonna ainuliik.",
                            FeaturedImgId = new Guid("c15a9527-ce53-4938-959f-91fba1f86037"),
                            LastEdited = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hallhüljes"
                        },
                        new
                        {
                            Id = new Guid("91668f09-7e3b-4b48-9b99-a99ec9bab704"),
                            BinomialName = "Panthera leo",
                            ConservationStatusId = new Guid("922b93a0-f05d-4b82-a4bf-5980d2b1b58a"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(5843),
                            Description = "Lõvid on väga suured ja võimsa kehaehitusega. Isaste kehapikkus on 180–240 cm, saba pikkus 60–90 cm, mass 180–227 kg. Kere on sale, isegi kiitsakas. Pea on erakordselt massiivne, võrdlemisi pika koonuga. Jäsemed on lüheldased ja väga tugevad. Pikk saba lõpeb tutiga. Keha katab lühikene pruunikaskollane karvastik. Täiskasvanud isasloomal on pikk tumedam lakk, mis katab nii kaela, õlgu kui ka rinda.",
                            FeaturedImgId = new Guid("4abde759-cc78-409e-986e-8a9eb08bff7d"),
                            LastEdited = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lõvi"
                        },
                        new
                        {
                            Id = new Guid("8e45bca4-b6db-40c4-a78b-b295b9d3dcd6"),
                            BinomialName = "Macaca fuscata",
                            ConservationStatusId = new Guid("78202fb8-b51e-4177-9f68-acb9d3cf6c3d"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(5906),
                            Description = "Jässaka kehaehituse ja tiheda karvakasukaga jaapani makaagid on kõige põhjapoolsema levikuga ahvid. Talvekülmade eest otsivad kaitset kuumaveeallikates. Tegutsevad nii puudel kui maapinnal, ujuvad ja sukelduvad suurepäraselt. Söövad puuvilju, taimede lehti ja juuri, putukaid, limuseid jms, ka pisiimetajaid. Elavad gruppidena, mida juhib tugev isasloom ja kus on selgelt välja kujunenud alluvussuhted. Omavahelisel suhtlemisel on tähtsal kohal häälitsused, miimika ja žestid. Pojad sünnivad enamasti kevad-suvel. Järglaste eest hoolitseb sageli ka isane. Loomaaias on elanud kuni 35 aastat vanaks.",
                            FeaturedImgId = new Guid("4504700e-44c8-4741-87d6-3093a11b0f03"),
                            LastEdited = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jaapani makaak"
                        },
                        new
                        {
                            Id = new Guid("f2edd8b2-9c37-49a8-b3ef-6c95559b70aa"),
                            BinomialName = "Pan troglodytes",
                            ConservationStatusId = new Guid("78202fb8-b51e-4177-9f68-acb9d3cf6c3d"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(5920),
                            Description = "Asustavad metsi, võsastikke ja kohati ka lagedamaid alasid. Tegutsevad nii puudel kui maapinnal. Aktiivsed päeval, ööbivad puude otsa ehitatud pesades. Söövad puuvilju, lehti, seemneid, marju, putukaid. Vahel söövad šimpansid ka liha, püüdes üheskoos saagiks väiksemaid loomi. Elavad 20–30-isendilistes seltsingutes, kus valitseb keeruline võimujaotus. Karjasisestes suhetes on nad väga sallivad, kuid võõrast karjast sissetungijate vastu vaenulikud. Sigivad läbi aasta, pärast 230-päevast tiinust toob emane ilmale 1 poja. Emast võõrdumine algab u. 5. eluaastast. Suguküpsuse saavutavad 12–15-aastastena. Eluiga kuni 50 a. Geneetiliselt on šimpans inimese lähim elav sugulane. Šimpanseid ohustab vihmametsade hävitamine ja salaküttimine.",
                            FeaturedImgId = new Guid("7eb5a7bf-a5c3-45b6-84f2-5e1bbfc90bde"),
                            LastEdited = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Šimpans"
                        },
                        new
                        {
                            Id = new Guid("211634e3-04f7-403e-81ff-c64229036005"),
                            BinomialName = "Phacochoerus africanus",
                            ConservationStatusId = new Guid("78202fb8-b51e-4177-9f68-acb9d3cf6c3d"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(5933),
                            Description = "Asustavad savanne ja hõredaid põõsastikke, vältides tihedaid metsi. Elavad rühmades, kuhu kuulu-vad 1–3 emist koos põrsastega. Kuldid hoiavad eraldi. Tegutsevad päeval, veetes öö urus, kuhu täiskasvanud sisenevad tagurpidi, sulgedes uruava oma suure tüükalise peaga. Toituvad rohttaimedest, liikudes ringi poolroomates “põlvili”, esijäsemetel on randmeliigese kohal paksud mõhnad. Sigivad aasta läbi, kuigi enim poegi on vihmaperioodil. Jooksuajal teevad isased mootoripodinat meenutavat häält ja katsuvad rammu, surudes teineteist teelt, laubad vastamisi. Emane sünnitab urus 3–4 vöötideta põrsast.",
                            FeaturedImgId = new Guid("8c3f3234-142b-47e2-8db2-2b570e003953"),
                            LastEdited = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tüügassiga"
                        });
                });

            modelBuilder.Entity("Domain.Animals.AnimalFact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnimalId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Label")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("AnimalFact");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4314b535-c9a7-44cb-8cfc-f0ea70d680b1"),
                            AnimalId = new Guid("e24360c3-ef70-443d-bb42-dfc3d790e745"),
                            Description = "Hallhülge eluiga jääb tavaliselt 15–25 aasta vahele. Vanim loodusest leitud isend oli 46-aastane emane.",
                            Label = "Eluiga"
                        },
                        new
                        {
                            Id = new Guid("bd2bd2db-91e2-41d5-a962-e6ea70573b6e"),
                            AnimalId = new Guid("e24360c3-ef70-443d-bb42-dfc3d790e745"),
                            Description = "Hallhülge ladinakeelse nimetuse tähendus tuleb kreekakeelsetest sõnadest Halios – meri, khoiros – siga ja grupos – konksnina.",
                            Label = "Nimetus"
                        },
                        new
                        {
                            Id = new Guid("50909a13-284e-4557-823c-a408e20155d4"),
                            AnimalId = new Guid("91668f09-7e3b-4b48-9b99-a99ec9bab704"),
                            Description = "Läbi aegade on lõvi peetud loomade kuningaks. See sai alguse raamatust \"Physiologus\".",
                            Label = "Loomade kuningas"
                        });
                });

            modelBuilder.Entity("Domain.Animals.ConservationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ConservationStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f12e90a-78c1-4b72-a027-c267d259b48f"),
                            Abbreviation = "EX",
                            Name = "Extinct"
                        },
                        new
                        {
                            Id = new Guid("65df37b0-99de-4cc2-94c1-b0e739918c78"),
                            Abbreviation = "EW",
                            Name = "Extinct in the wild"
                        },
                        new
                        {
                            Id = new Guid("ba3c48c2-2464-470a-9e6b-762a7dd6d3cf"),
                            Abbreviation = "CR",
                            Name = "Critically endangered"
                        },
                        new
                        {
                            Id = new Guid("f794ed3b-e145-48e6-a16e-b21d9b62037c"),
                            Abbreviation = "EN",
                            Name = "Endangered"
                        },
                        new
                        {
                            Id = new Guid("922b93a0-f05d-4b82-a4bf-5980d2b1b58a"),
                            Abbreviation = "VU",
                            Name = "Vulnerable"
                        },
                        new
                        {
                            Id = new Guid("8c30cfca-2365-46f7-b97c-c96ca29b24fd"),
                            Abbreviation = "NT",
                            Name = "Near threatened"
                        },
                        new
                        {
                            Id = new Guid("78202fb8-b51e-4177-9f68-acb9d3cf6c3d"),
                            Abbreviation = "LC",
                            Name = "Least concern"
                        },
                        new
                        {
                            Id = new Guid("5be82bdd-cec5-437d-b7d4-c591f1cb4eaf"),
                            Abbreviation = "DD",
                            Name = "Data deficient"
                        },
                        new
                        {
                            Id = new Guid("3977b2d0-8dba-404b-9e78-52246e026881"),
                            Abbreviation = "NE",
                            Name = "Not evaluated"
                        });
                });

            modelBuilder.Entity("Domain.Animals.MediaInAnimal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnimalId");

                    b.Property<Guid>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaInAnimal");
                });

            modelBuilder.Entity("Domain.Animals.ScientificClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ScientificClassification");
                });

            modelBuilder.Entity("Domain.Animals.SoundTrackInAnimal", b =>
                {
                    b.Property<Guid>("AnimalId");

                    b.Property<Guid>("SoundTrackId");

                    b.Property<Guid>("Id");

                    b.Property<bool>("IsFeatured");

                    b.HasKey("AnimalId", "SoundTrackId");

                    b.HasIndex("SoundTrackId");

                    b.ToTable("SoundTrackInAnimal");

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("e24360c3-ef70-443d-bb42-dfc3d790e745"),
                            SoundTrackId = new Guid("278a22a3-580e-4b70-8b18-19a6f9d67a00"),
                            Id = new Guid("019eed61-5875-4cb1-8c90-594d4986ad75"),
                            IsFeatured = true
                        },
                        new
                        {
                            AnimalId = new Guid("91668f09-7e3b-4b48-9b99-a99ec9bab704"),
                            SoundTrackId = new Guid("ca08cae5-d38c-4194-b850-bc1018268649"),
                            Id = new Guid("c5891d55-b656-4b1b-b47e-8cc9543c5f03"),
                            IsFeatured = true
                        },
                        new
                        {
                            AnimalId = new Guid("8e45bca4-b6db-40c4-a78b-b295b9d3dcd6"),
                            SoundTrackId = new Guid("52d30bdc-fb30-40aa-9d6a-a81f7a0dd519"),
                            Id = new Guid("842fb276-a826-4fc9-a450-70c156e81c46"),
                            IsFeatured = true
                        },
                        new
                        {
                            AnimalId = new Guid("8e45bca4-b6db-40c4-a78b-b295b9d3dcd6"),
                            SoundTrackId = new Guid("ead5bd8a-1535-4661-a477-d9efa39fab30"),
                            Id = new Guid("f487b8fd-5888-4b67-bd88-8ea3083778c2"),
                            IsFeatured = false
                        },
                        new
                        {
                            AnimalId = new Guid("8e45bca4-b6db-40c4-a78b-b295b9d3dcd6"),
                            SoundTrackId = new Guid("b758d1ae-3c48-4566-a47b-5a0f172c9739"),
                            Id = new Guid("6e995e97-1f3a-4b12-9b8d-94ff1a0f1cad"),
                            IsFeatured = false
                        },
                        new
                        {
                            AnimalId = new Guid("8e45bca4-b6db-40c4-a78b-b295b9d3dcd6"),
                            SoundTrackId = new Guid("8f909c41-a935-4691-97b4-e0d076151e0a"),
                            Id = new Guid("d282ff90-b385-4383-a51e-94f51163a63a"),
                            IsFeatured = false
                        },
                        new
                        {
                            AnimalId = new Guid("f2edd8b2-9c37-49a8-b3ef-6c95559b70aa"),
                            SoundTrackId = new Guid("4643af16-75e5-47a7-8e22-07dfaec59350"),
                            Id = new Guid("603a21f9-4e5c-46fd-9d75-6e8841e2463c"),
                            IsFeatured = true
                        },
                        new
                        {
                            AnimalId = new Guid("211634e3-04f7-403e-81ff-c64229036005"),
                            SoundTrackId = new Guid("c8481863-0e6c-4fda-b363-ac6d826a010d"),
                            Id = new Guid("aa973ac9-8645-44fa-aba0-c0ceb2652b2f"),
                            IsFeatured = true
                        });
                });

            modelBuilder.Entity("Domain.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("SenderEmail");

                    b.HasKey("Id");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7e2edad-0d7a-478e-9fb6-e15e5c9f54d9"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is a test feedback",
                            SenderEmail = "bob.test@email.com"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbedacf4-8c03-440b-a3dc-076fd7a779c9"),
                            ConcurrencyStamp = "0e65e318-4efb-41f2-ac85-9ce3d5228d7b",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("WorkPosition");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d790468e-67cd-4306-8308-5b8d1c394105",
                            Email = "mikkraudsepp@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mikk",
                            LastName = "Raudsepp",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("bbd5a089-fa55-45e9-89ba-aa81589d56cb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16b6038b-5a11-4179-96b5-2c964b8ed88d",
                            Email = "themikkraudsepp@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Domain.Map.AppMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AppMap");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fd691de-e726-42ae-8831-ded116db2e1e"),
                            Name = "Tallinna loomaaia kaart"
                        });
                });

            modelBuilder.Entity("Domain.Map.GeoCoordinate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<Guid>("MapSegmentId");

                    b.HasKey("Id");

                    b.HasIndex("MapSegmentId");

                    b.ToTable("GeoCoordinate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7337199-1b9e-4c37-9544-7d1165674784"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 769, DateTimeKind.Local).AddTicks(724),
                            Latitude = 59.451625300000003,
                            Longitude = 24.717528000000001,
                            MapSegmentId = new Guid("453ee0f6-78e9-40d6-ba3b-3d8a0640f420")
                        },
                        new
                        {
                            Id = new Guid("e9a1b22a-a7b8-4fc1-bb6f-964edd3242df"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 769, DateTimeKind.Local).AddTicks(1200),
                            Latitude = 59.451569300000003,
                            Longitude = 24.717741199999999,
                            MapSegmentId = new Guid("9cc92bf1-d090-4306-b02c-c9f1da1019dd")
                        },
                        new
                        {
                            Id = new Guid("5eedeba4-6028-4616-9d1d-b8cc9523849f"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 769, DateTimeKind.Local).AddTicks(1215),
                            Latitude = 59.4514493,
                            Longitude = 24.717574899999999,
                            MapSegmentId = new Guid("958d7e70-e7d3-42b3-8c2f-4ed6106d03e2")
                        },
                        new
                        {
                            Id = new Guid("2cee4b21-8c16-4e23-9cd9-74cb8cdb0906"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 769, DateTimeKind.Local).AddTicks(1297),
                            Latitude = 59.451469899999999,
                            Longitude = 24.717251099999999,
                            MapSegmentId = new Guid("71d894c6-c0c4-41a5-a192-c6d7850e2ed5")
                        },
                        new
                        {
                            Id = new Guid("c84aebfd-350b-4935-9d3f-d6330bbc940f"),
                            Created = new DateTime(2019, 5, 14, 14, 51, 57, 769, DateTimeKind.Local).AddTicks(1306),
                            Latitude = 59.451567400000002,
                            Longitude = 24.7173722,
                            MapSegmentId = new Guid("dc6ff54c-1b6d-4378-95e0-3d3aba33cd0e")
                        });
                });

            modelBuilder.Entity("Domain.Map.MapSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AnimalId");

                    b.Property<Guid?>("AppMapId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique()
                        .HasFilter("[AnimalId] IS NOT NULL");

                    b.HasIndex("AppMapId");

                    b.ToTable("MapSegment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("453ee0f6-78e9-40d6-ba3b-3d8a0640f420"),
                            AnimalId = new Guid("e24360c3-ef70-443d-bb42-dfc3d790e745"),
                            AppMapId = new Guid("4fd691de-e726-42ae-8831-ded116db2e1e"),
                            Name = "Hallhülge bassein"
                        },
                        new
                        {
                            Id = new Guid("9cc92bf1-d090-4306-b02c-c9f1da1019dd"),
                            AnimalId = new Guid("8e45bca4-b6db-40c4-a78b-b295b9d3dcd6"),
                            AppMapId = new Guid("4fd691de-e726-42ae-8831-ded116db2e1e"),
                            Name = "Ahvipuur - Jaapani Makaak"
                        },
                        new
                        {
                            Id = new Guid("958d7e70-e7d3-42b3-8c2f-4ed6106d03e2"),
                            AnimalId = new Guid("91668f09-7e3b-4b48-9b99-a99ec9bab704"),
                            AppMapId = new Guid("4fd691de-e726-42ae-8831-ded116db2e1e"),
                            Name = "Lõvipuur"
                        },
                        new
                        {
                            Id = new Guid("71d894c6-c0c4-41a5-a192-c6d7850e2ed5"),
                            AnimalId = new Guid("f2edd8b2-9c37-49a8-b3ef-6c95559b70aa"),
                            AppMapId = new Guid("4fd691de-e726-42ae-8831-ded116db2e1e"),
                            Name = "Šimpansite aed"
                        },
                        new
                        {
                            Id = new Guid("dc6ff54c-1b6d-4378-95e0-3d3aba33cd0e"),
                            AnimalId = new Guid("211634e3-04f7-403e-81ff-c64229036005"),
                            AppMapId = new Guid("4fd691de-e726-42ae-8831-ded116db2e1e"),
                            Name = "Tüügassea aedik"
                        });
                });

            modelBuilder.Entity("Domain.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileType");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UploadedDateTime");

                    b.Property<Guid>("UploaderUserId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("UploaderUserId");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c15a9527-ce53-4938-959f-91fba1f86037"),
                            FileType = "image",
                            Name = "Seal",
                            UploadedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/image/seal-avatar.jpg"
                        },
                        new
                        {
                            Id = new Guid("4abde759-cc78-409e-986e-8a9eb08bff7d"),
                            FileType = "image",
                            Name = "Lion",
                            UploadedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/image/lion-avatar.jpg"
                        },
                        new
                        {
                            Id = new Guid("4504700e-44c8-4741-87d6-3093a11b0f03"),
                            FileType = "image",
                            Name = "Japanese macaque",
                            UploadedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/image/japanese-macaque-avatar.jpg"
                        },
                        new
                        {
                            Id = new Guid("8c3f3234-142b-47e2-8db2-2b570e003953"),
                            FileType = "image",
                            Name = "Warhog",
                            UploadedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/image/warhog-avatar-1.jpg"
                        },
                        new
                        {
                            Id = new Guid("7eb5a7bf-a5c3-45b6-84f2-5e1bbfc90bde"),
                            FileType = "image",
                            Name = "Chimpanzee",
                            UploadedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/image/chimpanzee-avatar-1.jpg"
                        });
                });

            modelBuilder.Entity("Domain.SoundTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("Name");

                    b.Property<string>("Reader");

                    b.Property<int>("TimesPlayed");

                    b.Property<string>("TrackLength");

                    b.Property<DateTime>("UploadedDateTime");

                    b.Property<Guid>("UploaderUserId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("UploaderUserId");

                    b.ToTable("SoundTrack");

                    b.HasData(
                        new
                        {
                            Id = new Guid("278a22a3-580e-4b70-8b18-19a6f9d67a00"),
                            FileType = "mp3",
                            Name = "Seal facts",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(6965),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/grayseal-1.mp3"
                        },
                        new
                        {
                            Id = new Guid("ca08cae5-d38c-4194-b850-bc1018268649"),
                            FileType = "mp3",
                            Name = "Lõvi kirjeldus",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(7464),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/lion-1.mp3"
                        },
                        new
                        {
                            Id = new Guid("52d30bdc-fb30-40aa-9d6a-a81f7a0dd519"),
                            FileType = "mp3",
                            Name = "Jaapani makaak 1",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(7434),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/japanese-macaque-1.mp3"
                        },
                        new
                        {
                            Id = new Guid("ead5bd8a-1535-4661-a477-d9efa39fab30"),
                            FileType = "mp3",
                            Name = "Jaapani makaak 2",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(7452),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/japanese-macaque-2.mp3"
                        },
                        new
                        {
                            Id = new Guid("b758d1ae-3c48-4566-a47b-5a0f172c9739"),
                            FileType = "mp3",
                            Name = "Jaapani makaak 3",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(7457),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/japanese-macaque-3.mp3"
                        },
                        new
                        {
                            Id = new Guid("8f909c41-a935-4691-97b4-e0d076151e0a"),
                            FileType = "mp3",
                            Name = "Jaapani makaak 4",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(7461),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/japanese-macaque-4.mp3"
                        },
                        new
                        {
                            Id = new Guid("4643af16-75e5-47a7-8e22-07dfaec59350"),
                            FileType = "mp3",
                            Name = "Kuidas rääkida šimpansiga",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(7468),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/chimpanzee-1.mp3"
                        },
                        new
                        {
                            Id = new Guid("c8481863-0e6c-4fda-b363-ac6d826a010d"),
                            FileType = "mp3",
                            Name = "Tüügassiga on imeline loom",
                            TimesPlayed = 0,
                            UploadedDateTime = new DateTime(2019, 5, 14, 14, 51, 57, 768, DateTimeKind.Local).AddTicks(7471),
                            UploaderUserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            Url = "media/audio/warhog-1.mp3"
                        });
                });

            modelBuilder.Entity("Domain._Shared.Statuses.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Domain._Shared.Statuses.StatusInMapSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDateTimeFrom");

                    b.Property<DateTime?>("ActiveDateTimeTo");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("MapSegmentId");

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("MapSegmentId");

                    b.HasIndex("StatusId");

                    b.ToTable("StatusInMapSegment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2fcdd784-1ff2-4e93-9380-36005a9f1328"),
                            RoleId = new Guid("dbedacf4-8c03-440b-a3dc-076fd7a779c9")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Animals.Animal", b =>
                {
                    b.HasOne("Domain.Animals.ConservationStatus", "ConservationStatus")
                        .WithMany("Animals")
                        .HasForeignKey("ConservationStatusId");

                    b.HasOne("Domain.Media", "FeaturedImg")
                        .WithMany("Animals")
                        .HasForeignKey("FeaturedImgId");

                    b.HasOne("Domain.Animals.ScientificClassification", "ScientificClassification")
                        .WithMany("Animals")
                        .HasForeignKey("ScientificClassificationId");
                });

            modelBuilder.Entity("Domain.Animals.AnimalFact", b =>
                {
                    b.HasOne("Domain.Animals.Animal", "Animal")
                        .WithMany("AnimalFacts")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Animals.MediaInAnimal", b =>
                {
                    b.HasOne("Domain.Animals.Animal", "Animal")
                        .WithMany("MediaInAnimals")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Media", "Media")
                        .WithMany("MediaInAnimals")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Animals.SoundTrackInAnimal", b =>
                {
                    b.HasOne("Domain.Animals.Animal", "Animal")
                        .WithMany("AnimalSoundTracks")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.SoundTrack", "SoundTrack")
                        .WithMany("AnimalSoundtracks")
                        .HasForeignKey("SoundTrackId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Map.GeoCoordinate", b =>
                {
                    b.HasOne("Domain.Map.MapSegment", "MapSegment")
                        .WithMany("GeoCoordinates")
                        .HasForeignKey("MapSegmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Map.MapSegment", b =>
                {
                    b.HasOne("Domain.Animals.Animal", "Animal")
                        .WithOne("MapSegment")
                        .HasForeignKey("Domain.Map.MapSegment", "AnimalId");

                    b.HasOne("Domain.Map.AppMap", "AppMap")
                        .WithMany("MapSegments")
                        .HasForeignKey("AppMapId");
                });

            modelBuilder.Entity("Domain.Media", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "UploaderUser")
                        .WithMany("Medias")
                        .HasForeignKey("UploaderUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.SoundTrack", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "UploaderUser")
                        .WithMany("SoundTracks")
                        .HasForeignKey("UploaderUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain._Shared.Statuses.StatusInMapSegment", b =>
                {
                    b.HasOne("Domain.Animals.Animal", "MapSegment")
                        .WithMany()
                        .HasForeignKey("MapSegmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain._Shared.Statuses.Status", "Status")
                        .WithMany("StatusInMapSegments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
